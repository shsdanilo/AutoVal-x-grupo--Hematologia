/* 
NOMBRE: AdvAV - AutoVal x grupo - Trigger - Hemograma - v2.0 solo aplica a hematologia
OBJETIVO: AutoValidacion de resultados por Grupo - controla que solo se active la autovalidacion cuando todos los examenes del grupo cumplan los limites
ACCION ESPECIFICA: Configura modo de validacion en "Por Defecto" segun el cumplimiento de los limites de autovalidacion de todo el grupo y el modo de configuracion. Se debe configurar la autovalidacion de tedos los examenes incluidos en el listado, de lo contrario todo sera retenido.
USO: Se debe copiar este codigo y crear uno nuevo por cada grupo definido. Se implementa en "Regla experta" de los examenes que hagan parte del listado de grupo definido mas abajo en la seccion de configuracion.
Se aplica en el campo instrumento>comunicacion>En Mensaje final de Resultado.
Se debe usar ademas el MISPL complementario NOMBRE: AdvAV - AutoVal x grupo - NewReq - XXX" en el campo trigger de cada uno de los examenes listados en la configuracion.
IDENTIFICADOR -> PP-220914-001-1
Desarrollado para -> ADM1.2
Tabla: Sample
Return: logical
Desarrollado por: Daniel Garcia 
Fecha modificacion: 20220914
Version 2.0

Fecha de modificacion: 20200304

				

Control de Cambios ->
Version 1.0 -> Liberacion de desarrollo
Version 1.1 -> Se modifica para implementar validacion de hemoglobina frente a hematocritos
				El valor del un tercio del hematocrito debe tener una diferencia menor al 10% respecto a la hemoglobina medida 
				variacion permitida > variacion real
                0.1(HCT/3)>ABS((HCT/3)-HGB)
				ejemplo> 
				Si HCT = 45
				entonces HGB =15 +- 10%
Si se encuentra que se viola esta regla, se retiene todo el grupo
Version 2.0 -> Se cambia el sitio de ejecucion del MISPL, del sitio original Trigger de cada examen, al Mensaje en final de resultado de cada instrumento.

*/


Logical notAutoVal,AllInSample;
integer i,Mode,nGroup,NormSevLim,DeltaSevLim,QCSevLim,InstSevLim;
String Group;
Request rq;

/*VALIDACION REGLA HCT/HGB - */

fractional resHGB,resHCT,index,varPercent,variation;

varPercent:=0.1; /*10%*/

resHGB:=.numericValue("HGB");
resHCT:=.numericValue("HCT");


IF resHGB<>? AND resHCT<>? THEN

	index:=resHCT/3;

	variation:=0.1*index;

	Message("HCT: "+ toString(resHCT,"%f")+CHR(10)+
	"HGB: "+ toString(resHGB,"%f")+CHR(10)+
	"index(HCT/3): "+ toString(index,"%f")+CHR(10)+
	"variationAllow(10%): "+ toString(variation,"%f")+CHR(10)+
	"variationReal: "+ toString(Fabs(index-resHGB),"%f"));

	IF Fabs(resHGB-index) > variation THEN
		Message("Variacion regla HCT/HGB mayor a la permitida");
		RETURN TRUE;
	ENDIF;
ENDIF;

/*NO MODIFICAR ARRIBA DE ESTA LINEA*/




/* ---------------CONFIGURACION DE VALIDACION POR GRUPO ------------- */
/*limite de la autovalidacion (cualquier resultado con sev mayor o igual se retiene todo el hemograma)*/

/* Configurar el listado de examenes separados por ,(coma), verificar que concida con "Codigo de Prueba*/

/* Group:="WBC,RBC,HGB,HCT,MCV,MCH,MCHC,RDW,PLT,MPV,NEUTp,LYMp,MONOp,EOSp,BASOp,LUCp,NEUTc,LYMc,MONOc,EOSc,BASOc,CHCM"; */

Group:="ANISO,BASOc,BASOp,BLASTS,CH,CHCM,CHCMg,CHCMr,CHDWg,CHDWr,CHg,CHr,EOSc,EOSp,HCT,HCVAR,HDW,HDWg,HDWr,HemImage,HGB,HYPER,HYPO,IG,LI,LPLT,LS,LUCc,LUCp,LYMc,LYMp,MACRO,MCH,MCHC,MCV,MCVg,MCVr,MICRO,MONOc,MONOp,MPO,MPV,MPXI,NEUTc,NEUTp,NEUTx,NEUTy,NRBC,NRBCc,NRBCp,PCT,PDW,PLT,PLTCLM,RBC,RBCF,RBCG,RDW,RDWg,RDWr,RETICc,RETICp,RTCRBC,sf#EOS,sf#LYM,sf#MN,sf#MON,sf#NEU,sf#PMN,sf%EOS,sf%LYM,sf%MN,sf%MON,sf%NEU,sf%PMN,sfRBC,sfWBC,Slide,WBC,WBCB,WBCP";

Mode:=3;

/* Mode=
1 -> Solo se aplica el proceso cuando todos los examenes del grupo esten en la muestra, si no estan todos los examenes, cada uno se autovalida independientemente
2 -> Solo se aplica el proceso cuando todos los examenes del grupo esten en la muestra, si no estan todos los examenes, no se autovalida ninguno
3 -> Se aplica el proceso a cualquier combinacion de examenes en el grupo que llegue en la muestra*/


/*NO MODIFICAR ABAJO DE ESTA LINEA*/





/*-----------------------AUTOVALIDACION POR GRUPO------------------------*/

Message("Ejecutando MISPL: AdvAV - AutoVal x grupo - Trigger - Hemograma ->"+Group);
IF Mode<1 OR Mode>3 THEN
	Message("Error: Parametro mode no valido!!!");
	RETURN FALSE;
ENDIF;


i:=1;
nGroup:=numEntries(Group,?);
notAutoVal:=FALSE;
AllInSample:=TRUE;

IF nGroup<=1 THEN
	Message("Error: Un grupo debe estar compuesto de por lo menos 2 examenes");
	RETURN FALSE;
ENDIF;

IF nGroup=2 AND Mode=3 THEN
    Message("Modo 3 con grupo de 2 examenes, se asumira como Modo=1");
	Mode:=1; /* si es un grupo de 2 examenes, es lo mismo que una validacion independiente por examen en caso de q no este alguno por lo que se comporta como un modo 1, mas facil la condicional que dejar a servicio la configuracion*/
ENDIF;

/*Revisar si todos los examenes estan en la muestra*/
While i<=nGroup DO
    rq:=.getRequest(Entry(i,Group,?));
		
	IF rq=? OR rq.status=RequestStatus["Omitted"] THEN
		AllInSample:=FALSE;
		/*Debug*/ Message("Not all in Sample!!");
		
		IF FindTestByName(Entry(i,Group,?))=? THEN
			Message("Advertencia: Test "+Entry(i,Group,?)+" configurado en el grupo no existe revise configuracion del grupo en el MISPL");
		ENDIF;
		
		IF Mode=2 THEN
			Message("Mode=2: Todos los examenes no estan en la muestra, no se autovalida ninguno!!");
			RETURN FALSE;
		ENDIF; 
		
	ENDIF;
    
	i:=i+1;
DONE;

/*Debug*/ Message("Check if all test in sample, done!");


/* Revisar que todos lo examenes tengan un resultado y metodo asociado*/
i:=1;
While i<=nGroup DO
	rq:=.getRequest(Entry(i,Group,?));
	
	IF rq<>? THEN
		IF AllInSample=FALSE AND Mode=1 THEN
			/*Debug*/ Message("Mode=1: "+rq.test.name+" autoval to default");
			rq.SetAutovalidationMode(2);
			
		ELSE
			
			IF rq.status<RequestStatus["Review"]  THEN
				Message("Resultado de "+rq.test.name+" pendiente");
				RETURN FALSE; /* Interrumpe la ejecucion en el momento que encuentra que cualquiera de los examenes no tiene resultado*/
			ENDIF;

			IF rq.Test.Calculation=? AND rq.Result.Method=? THEN
				Message("Resultado de "+rq.test.name+" no es calculo o no tiene Metodo asociado, autovalidacion del grupo no es posible!");
				RETURN FALSE; /* Interrumpe la ejecucion en el momento que encuentra que cualquiera de los examenes no es calculo y no tiene metodo asociado*/
			ENDIF;
		
		ENDIF;
	ENDIF;
	i:=i+1;
DONE;

IF AllInSample=FALSE AND Mode=1 THEN
	Message("Mode=1: No estan todos los examenes del grupo en la muestra, se autovalidan independiente");
	RETURN FALSE;
ENDIF;

/*Debug*/ Message("Check if status and method are correct, done!");

/*Evaluar los limites de autovalidacion de todos los examenes*/
i:=1;

While i<=nGroup DO
	rq:=.getRequest(Entry(i,Group,?));
	
	IF rq<>? THEN
		IF rq.Test.Calculation=? THEN
			NormSevLim:=rq.Result.Method.NormSeverityLimit; 
			DeltaSevLim:=rq.Result.Method.DeltaNormSeverityLimit;
			QCSevLim:=rq.Result.Method.InstSeverityLimit;
			InstSevLim:=rq.Result.Method.QCSeverityLimit;
			/*Debug*/ Message(rq.test.name+" limites de severidad de Metodo!");			
			
		ELSE
			NormSevLim:=rq.Test.CalcNormSevLimit; 
			DeltaSevLim:=rq.Test.CalcDeltaNormSevLimit;
			QCSevLim:=rq.Test.CalcQCSevLimit;
			InstSevLim:=rq.Test.CalcInstSevLimit;
			/*Debug*/ Message(rq.test.name+" calculado, limites de severidad de calculo!");
			
		ENDIF;

         /*Debug*/ Message(rq.test.name+" Limites-> N:"+ifKnownString(toString(NormSevLim,"%d"))+" D:"+ifKnownString(toString(DeltaSevLim,"%d"))+" Q:"+ifKnownString(toString(QCSevLim,"%d"))+" I:"+ifKnownString(toString(InstSevLim,"%d")));
		 
		 
		/* Interrumpir proceso si alguno de los limites de autovalidacion no esta configurado*/
		IF NormSevLim=? OR DeltaSevLim=? OR QCSevLim=? OR InstSevLim=? THEN
			Message("Limites de severidad de "+rq.test.name+" no configurados, autovalidacion del grupo no es posible!");
			RETURN FALSE;
		ENDIF;

		/*Evaluar si todos los request estan por debajo de los limites de severidad*/
		
		IF abs(rq.NormSeverity)>=NormSevLim OR abs(rq.DeltaNormSeverity)>=DeltaSevLim OR abs(rq.QCSeverity)>=QCSevLim OR abs(rq.InstrumentSeverity)>=InstSevLim THEN
			Message(rq.test.name +" no cumple con los criterios de validacion, autoval del grupo detenida...");
			notAutoVal:=TRUE;
		ENDIF;	
	ENDIF;
	
	i:=i+1;
DONE;

/*Debug*/ Message("Check if limits are correct, done!");

i:=1;
IF notAutoVal=true THEN	
	
	/* Esta parte regresa el modo de autovalidacion a "Nunca" de todos los examenes del grupo, se realiza para contemplar los casos donde sean reejecuciones*/
	While i<=nGroup DO
		rq:=.getRequest(Entry(i,Group,?));
		If rq.status=RequestStatus["Validated"] THEN
		   rq.invalidate();
		   Message(rq.test.name +" invalidada por criterios de autovalidacion de los examenes del grupo");
		ENDIF;

		rq.SetAutovalidationMode(1);
		
		i:=i+1;
	DONE;
	Message("Se inactiva nuevamente autovalidacion del grupo por incumplimiento de limite de autovalidacion");
	RETURN TRUE;
    
	/* Todos los examenes cumplen los criterio de autovalidacion, se configura modo de autovalidacion en "Por Defecto" para que aplique la autovalidacion de cada examen si esta activada*/
ELSE IF notAutoVal=false THEN
	
	While i<=nGroup DO	
		rq:=.getRequest(Entry(i,Group,?));
		rq.SetAutovalidationMode(2);
		
		IF rq.Test.AllowAutovalidation = FALSE THEN
			Message("Alerta, examen "+rq.Test.Name+" tiene autovalidacion inactiva (Anlisis>Val Autom), resto del grupo se valida!");
		ENDIF;

		i:=i+1;
	DONE;
    Message("Activada la autovalidacion del grupo-> "+Group+" <- Todos cumplen con los criterios!!" ); 
	.CheckResults();

	RETURN TRUE;
	
ENDIF;
ENDIF;

RETURN FALSE;
